@*
 * Copyright (C) from 2022 The Play Framework Contributors <https://github.com/playframework>, 2011-2021 Lightbend Inc. <https://www.lightbend.com>
 *@
@(service: org.apache.pekko.grpc.gen.javadsl.Service, powerApis: Boolean)

@org.apache.pekko.grpc.gen.Constants.DoNotEditComment
package @service.packageName;

import java.util.concurrent.CompletionStage;

import org.apache.pekko.japi.Function;

import org.apache.pekko.http.scaladsl.model.HttpRequest;
import org.apache.pekko.http.scaladsl.model.HttpResponse;
import org.apache.pekko.grpc.javadsl.GrpcExceptionHandler;
import org.apache.pekko.actor.ActorSystem;

import play.grpc.internal.PlayRouter;

@defining(if (powerApis) service.name + "PowerApi" else service.name) { serviceName =>
  /**
   * Abstract base class for implementing @serviceName in Java and using as a play Router
   */
  public abstract class Abstract@{serviceName}Router extends PlayRouter implements @{serviceName} {
    private final scala.Function1<HttpRequest, scala.concurrent.Future<HttpResponse>> respond;

    public Abstract@{serviceName}Router(ActorSystem system) {
      this(system, GrpcExceptionHandler.defaultMapper());
    }

    public Abstract@{serviceName}Router(ActorSystem system, Function<ActorSystem, Function<Throwable, org.apache.pekko.grpc.Trailers>> eHandler) {
      super(@{service.name}.name);
      this.respond = play.grpc.internal.PlayRouterHelper.handlerFor(
        @{serviceName}HandlerFactory.create(this, serviceName(), eHandler, system),
        system.getDispatcher()
      );
    }

    /**
     * INTERNAL API
     */
    public scala.Function1<HttpRequest, scala.concurrent.Future<HttpResponse>> respond() {
      return respond;
    }
  }
}
